webpackJsonp([0xb3a309236c57],{405:function(n,a){n.exports={data:{post:{html:'<h1 id="filters"><a href="#filters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Filters</h1>\n<p>API Platform Core provides a generic system to apply filters on collections. Useful filters for the Doctrine ORM are provided\nwith the library. You can also create custom filters that would fit your specific needs.\nYou can also add filtering support to your custom <a href="/docs/core/data-providers">data providers</a> by implementing interfaces provided\nby the library.</p>\n<p>By default, all filters are disabled. They must be enabled explicitly.</p>\n<p>When a filter is enabled, it is automatically documented as a <code>hydra:search</code> property in the collection response. It also\nautomatically appears in the <a href="/docs/core/nelmio-api-doc">NelmioApiDoc documentation</a> if it is available.</p>\n<h2 id="doctrine-orm-filters"><a href="#doctrine-orm-filters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Doctrine ORM Filters</h2>\n<h3 id="basic-knowledge"><a href="#basic-knowledge" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Knowledge</h3>\n<p>Filters are services (see the section on <a href="#creating-custom-filters">custom filters</a>), and they can be linked\nto a Resource in two ways:</p>\n<ol>\n<li>Through the <code>ApiResource</code> declaration, as the <code>filters</code> attribute.</li>\n</ol>\n<p>For example having a filter service declaration:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/services.yaml</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n    <span class="token key atrule">offer.date_filter</span><span class="token punctuation">:</span>\n        <span class="token key atrule">parent</span><span class="token punctuation">:</span> <span class="token string">\'api_platform.doctrine.orm.date_filter\'</span>\n        <span class="token key atrule">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token key atrule">dateProperty</span><span class="token punctuation">:</span> <span class="token null important">~ </span><span class="token punctuation">}</span> <span class="token punctuation">]</span>\n        <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token string">\'api_platform.filter\'</span> <span class="token punctuation">]</span>\n        <span class="token comment"># The following are mandatory only if a _defaults section is defined</span>\n        <span class="token comment"># You may want to isolate filters in a dedicated file to avoid adding them</span>\n        <span class="token key atrule">autowire</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n        <span class="token key atrule">autoconfigure</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n        <span class="token key atrule">public</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n</code></pre>\n      </div>\n<p>We\'re linking the filter <code>offer.date_filter</code> with the <code>@ApiResource</code> annotation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource(attributes={"filters"={"offer.date_filter"}})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Alternatively, using YAML:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/api_platform/resources.yaml</span>\n<span class="token key atrule">App\\Entity\\Offer</span><span class="token punctuation">:</span>\n    <span class="token key atrule">collectionOperations</span><span class="token punctuation">:</span>\n        <span class="token key atrule">get</span><span class="token punctuation">:</span>\n            <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'offer.date_filter\'</span><span class="token punctuation">]</span>\n    <span class="token comment"># ...</span>\n</code></pre>\n      </div>\n<p>Or XML:</p>\n<div class="gatsby-highlight">\n      <pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>\n<span class="token comment">&lt;!-- api/config/api_platform/resources.xml --></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://api-platform.com/schema/metadata<span class="token punctuation">"</span></span>\n           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>\n           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://api-platform.com/schema/metadata\n           https://api-platform.com/schema/metadata/metadata-2.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App\\Entity\\Offer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collectionOperations</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collectionOperation</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>offer.date_filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collectionOperation</span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!-- ... --></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collectionOperations</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<ol start="2">\n<li>By using the <code>@ApiFilter</code> annotation.</li>\n</ol>\n<p>This annotation automatically declares the service, and you just have to use the filter class you want:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>DateFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(DateFilter::class, properties={"dateProperty"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Learn more on how the <a href="/docs/core/filters#apifilter-annotation">ApiFilter annotation</a> works.</p>\n<p>For the sake of consistency, we\'re using the annotation in the below documentation.</p>\n<h3 id="search-filter"><a href="#search-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Search Filter</h3>\n<p>If Doctrine ORM support is enabled, adding filters is as easy as registering a filter service in the <code>api/config/services.yaml</code>\nfile and adding an attribute to your resource configuration.</p>\n<p>The search filter supports <code>exact</code>, <code>partial</code>, <code>start</code>, <code>end</code>, and <code>word_start</code> matching strategies:</p>\n<ul>\n<li><code>partial</code> strategy uses <code>LIKE %text%</code> to search for fields that containing the text.</li>\n<li><code>start</code> strategy uses <code>LIKE text%</code> to search for fields that starts with text.</li>\n<li><code>end</code> strategy uses <code>LIKE %text</code> to search for fields that ends with text.</li>\n<li><code>word_start</code> strategy uses <code>LIKE text% OR LIKE % text%</code> to search for fields that contains the word starting with <code>text</code>.</li>\n</ul>\n<p>Prepend the letter <code>i</code> to the filter if you want it to be case insensitive. For example <code>ipartial</code> or <code>iexact</code>. Note that\nthis will use the <code>LOWER</code> function and <strong>will</strong> impact performance <a href="/docs/core/performance#search-filter">if there is no proper index</a>.</p>\n<p>Case insensitivity may already be enforced at the database level depending on the <a href="https://en.wikipedia.org/wiki/Collation" target="_blank" rel="nofollow noopener noreferrer">collation</a>\nused. If you are using MySQL, note that the commonly used <code>utf8_unicode_ci</code> collation (and its sibling <code>utf8mb4_unicode_ci</code>)\nare already case insensitive, as indicated by the <code>_ci</code> part in their names.</p>\n<p>In the following example, we will see how to allow the filtering of a list of e-commerce offers:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>SearchFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource()\n * @ApiFilter(SearchFilter::class, properties={"id": "exact", "price": "exact", "name": "partial"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><code>http://localhost:8000/api/offers?price=10</code> will return all offers with a price being exactly <code>10</code>.\n<code>http://localhost:8000/api/offers?name=shirt</code> will return all offers with a description containing the word "shirt".</p>\n<p>Filters can be combined together: <code>http://localhost:8000/api/offers?price=10&#x26;name=shirt</code></p>\n<p>It is possible to filter on relations too, if <code>Offer</code> has a <code>Product</code> relation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource()\n * @ApiFilter(SearchFilter::class, properties={"product": "exact"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>With this service definition, it is possible to find all offers belonging to the product identified by a given IRI.\nTry the following: <code>http://localhost:8000/api/offers?product=/api/products/12</code>\nUsing a numeric ID is also supported: <code>http://localhost:8000/api/offers?product=12</code></p>\n<p>Previous URLs will return all offers for the product having the following IRI as JSON-LD identifier (<code>@id</code>): <code>http://localhost:8000/api/products/12</code>.</p>\n<h3 id="date-filter"><a href="#date-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Date Filter</h3>\n<p>The date filter allows for filtering a collection by date intervals.</p>\n<p>Syntax: <code>?property[&#x3C;after|before|strictly_after|strictly_before>]=value</code></p>\n<p>The value can take any date format supported by the <a href="http://php.net/manual/en/datetime.construct.php" target="_blank" rel="nofollow noopener noreferrer"><code>\\DateTime</code> constructor</a>.</p>\n<p>The <code>after</code> and <code>before</code> filters will filter including the value whereas <code>strictly_after</code> and <code>strictly_before</code> will filter excluding the value.</p>\n<p>As others filters, the date filter must be explicitly enabled:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>DateFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(DateFilter::class, properties={"createdAt"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Given that the collection endpoint is <code>/offers</code>, you can filter offers by date with the following query: <code>/offers?createdAt[after]=2018-03-19</code>.</p>\n<p>It will return all offers where <code>createdAt</code> is superior or equal to <code>2018-03-19</code>.</p>\n<h4 id="managing-null-values"><a href="#managing-null-values" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Managing <code>null</code> Values</h4>\n<p>The date filter is able to deal with date properties having <code>null</code> values.\nFour behaviors are available at the property level of the filter:</p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>Strategy to set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Use the default behavior of the DBMS</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>Exclude items</td>\n<td><code>ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::EXCLUDE_NULL</code>\n (\n<code>exclude_null</code>\n)</td>\n</tr>\n<tr>\n<td>Consider items as oldest</td>\n<td><code>ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_BEFORE</code>\n (\n<code>include_null_before</code>\n)</td>\n</tr>\n<tr>\n<td>Consider items as youngest</td>\n<td><code>ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_AFTER</code>\n (\n<code>include_null_after</code>\n)</td>\n</tr>\n</tbody>\n</table>\n<p>For instance, exclude entries with a property value of <code>null</code>, with the following service definition:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>DateFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(DateFilter::class, properties={"dateProperty": DateFilter::EXCLUDE_NULL})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3 id="boolean-filter"><a href="#boolean-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Boolean Filter</h3>\n<p>The boolean filter allows you to search on boolean fields and values.</p>\n<p>Syntax: <code>?property=&#x3C;true|false|1|0></code></p>\n<p>Enable the filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>BooleanFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(BooleanFilter::class, properties={"isAvailableGenericallyInMyCountry"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Given that the collection endpoint is <code>/offers</code>, you can filter offers by boolean with the following query: <code>/offers?isAvailableGenericallyInMyCountry=true</code>.</p>\n<p>It will return all offers where <code>isAvailableGenericallyInMyCountry</code> equals <code>true</code>.</p>\n<h3 id="numeric-filter"><a href="#numeric-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Numeric Filter</h3>\n<p>The numeric filter allows you to search on numeric fields and values.</p>\n<p>Syntax: <code>?property=&#x3C;int|bigint|decimal...></code></p>\n<p>Enable the filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>NumericFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(NumericFilter::class, properties={"sold"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Given that the collection endpoint is <code>/offers</code>, you can filter offers by boolean with the following query: <code>/offers?sold=1</code>.</p>\n<p>It will return all offers with <code>sold</code> equals <code>1</code>.</p>\n<h3 id="range-filter"><a href="#range-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Range Filter</h3>\n<p>The range filter allows you to filter by a value Lower than, Greater than, Lower than or equal, Greater than or equal and between two values.</p>\n<p>Syntax: <code>?property[&#x3C;lt|gt|lte|gte|between>]=value</code></p>\n<p>Enable the filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>RangeFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(RangeFilter::class, properties={"price"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Given that the collection endpoint is <code>/offers</code>, you can filters the price with the following query: <code>/offers?price[between]=12.99..15.99</code>.</p>\n<p>It will return all offers with <code>price</code> between 12.99 and 15.99.</p>\n<p>You can filter offers by joining two values, for example: <code>/offers?price[gt]=12.99&#x26;price[lt]=19.99</code>.</p>\n<h3 id="exists-filter"><a href="#exists-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exists Filter</h3>\n<p>The exists filter allows you to select items based on nullable field value.</p>\n<p>Syntax: <code>?property[exists]=&#x3C;true|false|1|0></code></p>\n<p>Enable the filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>ExistsFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(ExistsFilter::class, properties={"transportFees"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Given that the collection endpoint is <code>/offers</code>, you can filter offers on nullable field with the following query: <code>/offers?transportFees[exists]=true</code>.</p>\n<p>It will return all offers where <code>transportFees</code> is not <code>null</code>.</p>\n<h3 id="order-filter-sorting"><a href="#order-filter-sorting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Order Filter (Sorting)</h3>\n<p>The order filter allows to sort a collection against the given properties.</p>\n<p>Syntax: <code>?order[property]=&#x3C;asc|desc></code></p>\n<p>Enable the filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>OrderFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(OrderFilter::class, properties={"id", "name"}, arguments={"orderParameterName"="order"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Given that the collection endpoint is <code>/offers</code>, you can filter offers by name in ascending order and then by ID in descending\norder with the following query: <code>/offers?order[name]=desc&#x26;order[id]=asc</code>.</p>\n<p>By default, whenever the query does not specify the direction explicitly (e.g: <code>/offers?order[name]&#x26;order[id]</code>), filters\nwill not be applied unless you configure a default order direction to use:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>OrderFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(OrderFilter::class, properties={"id": "ASC", "name": "DESC"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4 id="comparing-with-null-values"><a href="#comparing-with-null-values" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Comparing with Null Values</h4>\n<p>When the property used for ordering can contain <code>null</code> values, you may want to specify how <code>null</code> values are treated in\nthe comparison:</p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>Strategy to set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Use the default behavior of the DBMS</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>Consider items as smallest</td>\n<td><code>ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter::NULLS_SMALLEST</code>\n (\n<code>nulls_smallest</code>\n)</td>\n</tr>\n<tr>\n<td>Consider items as largest</td>\n<td><code>ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter::NULLS_LARGEST</code>\n (\n<code>nulls_largest</code>\n)</td>\n</tr>\n</tbody>\n</table>\n<p>For instance, treat entries with a property value of <code>null</code> as the smallest, with the following service definition:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>OrderFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(OrderFilter::class, properties={"validFrom": { "nulls_comparison": OrderFilter::NULLS_SMALLEST, "default_direction": "DESC" }})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4 id="using-a-custom-order-query-parameter-name"><a href="#using-a-custom-order-query-parameter-name" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using a Custom Order Query Parameter Name</h4>\n<p>A conflict will occur if <code>order</code> is also the name of a property with the search filter enabled.\nLuckily, the query parameter name to use is configurable:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/packages/api_platform.yaml</span>\n<span class="token key atrule">api_platform</span><span class="token punctuation">:</span>\n    <span class="token key atrule">collection</span><span class="token punctuation">:</span>\n        <span class="token key atrule">order_parameter_name</span><span class="token punctuation">:</span> \'_order\' <span class="token comment"># the URL query parameter to use is now "_order"</span>\n</code></pre>\n      </div>\n<h3 id="filtering-on-nested-properties"><a href="#filtering-on-nested-properties" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Filtering on Nested Properties</h3>\n<p>Sometimes, you need to be able to perform filtering based on some linked resources (on the other side of a relation). All\nbuilt-in filters support nested properties using the dot (<code>.</code>) syntax, e.g.:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>OrderFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>SearchFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(OrderFilter::class, properties={"product.releaseDate"})\n * @ApiFilter(SearchFilter::class, properties={"product.color": "exact"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The above allows you to find offers by their respective product\'s color: <code>http://localhost:8000/api/offers?product.color=red</code>,\nor order offers by the product\'s release date: <code>http://localhost:8000/api/offers?order[product.releaseDate]=desc</code></p>\n<h3 id="enabling-a-filter-for-all-properties-of-a-resource"><a href="#enabling-a-filter-for-all-properties-of-a-resource" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Enabling a Filter for All Properties of a Resource</h3>\n<p>As we have seen in previous examples, properties where filters can be applied must be explicitly declared. If you don\'t\ncare about security and performance (e.g. an API with restricted access), it is also possible to enable built-in filters\nfor all properties:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>OrderFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(OrderFilter::class)\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong>Note: Filters on nested properties must still be enabled explicitly, in order to keep things sane</strong></p>\n<p>Regardless of this option, filters can by applied on a property only if:</p>\n<ul>\n<li>the property exists</li>\n<li>the value is supported (ex: <code>asc</code> or <code>desc</code> for the order filters).</li>\n</ul>\n<p>It means that the filter will be <strong>silently</strong> ignored if the property:</p>\n<ul>\n<li>does not exist</li>\n<li>is not enabled</li>\n<li>has an invalid value</li>\n</ul>\n<h2 id="serializer-filters"><a href="#serializer-filters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Serializer Filters</h2>\n<h3 id="group-filter"><a href="#group-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Group Filter</h3>\n<p>The group filter allows you to filter by serialization groups.</p>\n<p>Syntax: <code>?groups[]=&#x3C;group></code></p>\n<p>You can add as many groups as you need.</p>\n<p>Enable the filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment">// api/src/Entity/Book.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Serializer<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>GroupFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(GroupFilter::class, arguments={"parameterName": "groups", "overrideDefaultGroups": false, "whitelist": {"allowed_group"}})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Book</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Three arguments are available to configure the filter:</p>\n<ul>\n<li><code>parameterName</code> is the query parameter name (default <code>groups</code>)</li>\n<li><code>overrideDefaultGroups</code> allows to override the default serialization groups (default <code>false</code>)</li>\n<li><code>whitelist</code> groups whitelist to avoid uncontrolled data exposure (default <code>null</code> to allow all groups)</li>\n</ul>\n<p>Given that the collection endpoint is <code>/books</code>, you can filter by serialization groups with the following query: <code>/books?groups[]=read&#x26;groups[]=write</code>.</p>\n<h3 id="property-filter"><a href="#property-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Property filter</h3>\n<p>The property filter adds the possibility to select the properties to serialize (sparse fieldsets).</p>\n<p>Syntax: <code>?properties[]=&#x3C;property>&#x26;properties[&#x3C;relation>][]=&#x3C;property></code></p>\n<p>You can add as many properties as you need.</p>\n<p>Enable the filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n\n<span class="token comment">// api/src/Entity/Book.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Serializer<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>PropertyFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(PropertyFilter::class, arguments={"parameterName": "properties", "overrideDefaultProperties": false, "whitelist": {"allowed_property"}})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Book</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Three arguments are available to configure the filter:</p>\n<ul>\n<li><code>parameterName</code> is the query parameter name (default <code>properties</code>)</li>\n<li><code>overrideDefaultProperties</code> allows to override the default serialization properties (default <code>false</code>)</li>\n<li><code>whitelist</code> properties whitelist to avoid uncontrolled data exposure (default <code>null</code> to allow all properties)</li>\n</ul>\n<p>Given that the collection endpoint is <code>/books</code>, you can filter the serialization properties with the following query: <code>/books?properties[]=title&#x26;properties[]=author</code>.\nIf you want to include some properties of the nested "author" document, use: <code>/books?properties[]=title&#x26;properties[author][]=name</code>.</p>\n<h2 id="creating-custom-filters"><a href="#creating-custom-filters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating Custom Filters</h2>\n<p>Custom filters can be written by implementing the <code>ApiPlatform\\Core\\Api\\FilterInterface</code>\ninterface.</p>\n<p>API Platform provides a convenient way to create Doctrine ORM filters. If you use <a href="/docs/core/data-providers">custom data providers</a>,\nyou can still create filters by implementing the previously mentioned interface, but - as API Platform isn\'t aware of your\npersistence system\'s internals - you have to create the filtering logic by yourself.</p>\n<h3 id="creating-custom-doctrine-orm-filters"><a href="#creating-custom-doctrine-orm-filters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating Custom Doctrine ORM Filters</h3>\n<p>Doctrine filters have access to the HTTP request (Symfony\'s <code>Request</code> object) and to the <code>QueryBuilder</code> instance used to\nretrieve data from the database. They are only applied to collections. If you want to deal with the DQL query generated\nto retrieve items, or don\'t need to access the HTTP request, <a href="/docs/core/extensions">extensions</a> are the way to go.</p>\n<p>A Doctrine ORM filter is basically a class implementing the <code>ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\FilterInterface</code>.\nAPI Platform includes a convenient abstract class implementing this interface and providing utility methods: <code>ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\AbstractFilter</code></p>\n<p>In the following example, we create a class to filter a collection by applying a regexp to a property. The <code>REGEXP</code> DQL\nfunction used in this example can be found in the <a href="https://github.com/beberlei/DoctrineExtensions" target="_blank" rel="nofollow noopener noreferrer"><code>DoctrineExtensions</code></a>\nlibrary. This library must be properly installed and registered to use this example (works only with MySQL).</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Filter/RegexpFilter.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>AbstractFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Util<span class="token punctuation">\\</span>QueryNameGeneratorInterface</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>QueryBuilder</span><span class="token punctuation">;</span>\n\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RegexpFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFilter</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">filterProperty</span><span class="token punctuation">(</span>string <span class="token variable">$property</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> QueryBuilder <span class="token variable">$queryBuilder</span><span class="token punctuation">,</span> QueryNameGeneratorInterface <span class="token variable">$queryNameGenerator</span><span class="token punctuation">,</span> string <span class="token variable">$resourceClass</span><span class="token punctuation">,</span> string <span class="token variable">$operationName</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$parameterName</span> <span class="token operator">=</span> <span class="token variable">$queryNameGenerator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">generateParameterName</span><span class="token punctuation">(</span><span class="token variable">$property</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generate a unique parameter name to avoid collisions with other filters</span>\n        <span class="token variable">$queryBuilder</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">\'REGEXP(o.%s, :%s) = 1\'</span><span class="token punctuation">,</span> <span class="token variable">$property</span><span class="token punctuation">,</span> <span class="token variable">$parameterName</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token operator">-</span><span class="token operator">></span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token variable">$parameterName</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// This function is only used to hook in documentation generators (supported by Swagger and Hydra)</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDescription</span><span class="token punctuation">(</span>string <span class="token variable">$resourceClass</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">properties</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">properties</span> <span class="token keyword">as</span> <span class="token variable">$property</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$strategy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$description</span><span class="token punctuation">[</span><span class="token string">"regexp_$property"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n                <span class="token string">\'property\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$property</span><span class="token punctuation">,</span>\n                <span class="token string">\'type\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n                <span class="token string">\'required\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                <span class="token string">\'swagger\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>\n                    <span class="token string">\'description\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'Filter using a regex. This will appear in the Swagger documentation!\'</span><span class="token punctuation">,</span>\n                    <span class="token string">\'name\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'Custom name to use in the Swagger documentation\'</span><span class="token punctuation">,</span>\n                    <span class="token string">\'type\'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">\'Will appear below the name in the Swagger documentation\'</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token variable">$description</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Then, register this filter as a service:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/services.yaml</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n    <span class="token key atrule">\'App\\Filter\\RegexpFilter\'</span><span class="token punctuation">:</span>\n        <span class="token comment"># Uncomment only if autoconfiguration isn\'t enabled</span>\n        <span class="token comment">#tags: [ \'api_platform.filter\' ]</span>\n</code></pre>\n      </div>\n<p>In the previous example, the filter can be applied on any property. However, thanks to the <code>AbstractFilter</code> class,\nit can also be enabled for some properties:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/services.yaml</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n    <span class="token key atrule">\'App\\Filter\\RegexpFilter\'</span><span class="token punctuation">:</span>\n        <span class="token key atrule">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'@doctrine\'</span><span class="token punctuation">,</span> <span class="token string">\'@request_stack\'</span><span class="token punctuation">,</span> <span class="token string">\'@?logger\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token key atrule">email</span><span class="token punctuation">:</span> <span class="token null important">~</span><span class="token punctuation">,</span> <span class="token key atrule">anOtherProperty</span><span class="token punctuation">:</span> <span class="token null important">~ </span><span class="token punctuation">}</span> <span class="token punctuation">]</span>\n        <span class="token comment"># Uncomment only if autoconfiguration isn\'t enabled</span>\n        <span class="token comment">#tags: [ \'api_platform.filter\' ]</span>\n</code></pre>\n      </div>\n<p>Finally, add this filter to resources you want to be filtered:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>RegexpFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource(attributes={"filters"={RegexpFilter::class}})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Or by using the <code>ApiFilter</code> annotation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Offer.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>RegexpFilter</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ApiFilter(RegexpFilter::class)\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Offer</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>You can now enable this filter using URLs like <code>http://example.com/offers?regexp_email=^[FOO]</code>. This new filter will also\nappear in Swagger and Hydra documentations.</p>\n<h3 id="using-doctrine-filters"><a href="#using-doctrine-filters" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using Doctrine Filters</h3>\n<p>Doctrine features <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/filters.html" target="_blank" rel="nofollow noopener noreferrer">a filter system</a> that allows the developer to add SQL to the conditional clauses of queries, regardless the place where the SQL is generated (e.g. from a DQL query, or by loading associated entities).\nThese are applied on collections and items, so are incredibly useful.</p>\n<p>The following information, specific to Doctrine filters in Symfony, is based upon <a href="http://blog.michaelperrin.fr/2014/12/05/doctrine-filters/" target="_blank" rel="nofollow noopener noreferrer">a great article posted on Michaël Perrin\'s blog</a>.</p>\n<p>Suppose we have a <code>User</code> entity and an <code>Order</code> entity related to the <code>User</code> one. A user should only see his orders and no others\'s ones.</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/User.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Order.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Order</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n\n    <span class="token comment">/**\n     * @ORM\\ManyToOne(targetEntity="User")\n     * @ORM\\JoinColumn(name="user_id", referencedColumnName="id")\n     **/</span>\n    <span class="token keyword">private</span> <span class="token variable">$user</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The whole idea is that any query on the order table should add a WHERE user<em>id = :user</em>id condition.</p>\n<p>Start by creating a custom annotation to mark restricted entities:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/Annotation/UserAware.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Annotation</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Common<span class="token punctuation">\\</span>Annotations<span class="token punctuation">\\</span>Annotation</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @Annotation\n * @Target("CLASS")\n */</span>\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UserAware</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token variable">$userFieldName</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Then, let\'s mark the <code>Order</code> entity as a "user aware" entity.</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/Order.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>UserAware</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @UserAware(userFieldName="user_id")\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Now, create a Doctrine filter class:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Filter/UserFilter.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>UserAware</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping<span class="token punctuation">\\</span>ClassMetaData</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>SQLFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Common<span class="token punctuation">\\</span>Annotations<span class="token punctuation">\\</span>Reader</span><span class="token punctuation">;</span>\n\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UserFilter</span> <span class="token keyword">extends</span> <span class="token class-name">SQLFilter</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token variable">$reader</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addFilterConstraint</span><span class="token punctuation">(</span>ClassMetadata <span class="token variable">$targetEntity</span><span class="token punctuation">,</span> string <span class="token variable">$targetTableAlias</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">reader</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">\'An annotation reader must be provided. Be sure to call "%s::setAnnotationReader()".\'</span><span class="token punctuation">,</span> <span class="token constant">__CLASS__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// The Doctrine filter is called for any query on any entity</span>\n        <span class="token comment">// Check if the current entity is "user aware" (marked with an annotation)</span>\n        <span class="token variable">$userAware</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">reader</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getClassAnnotation</span><span class="token punctuation">(</span><span class="token variable">$targetEntity</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getReflectionClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserAware<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$userAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token variable">$fieldName</span> <span class="token operator">=</span> <span class="token variable">$userAware</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">userFieldName</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Don\'t worry, getParameter automatically escapes parameters</span>\n            <span class="token variable">$userId</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">\\</span>InvalidArgumentException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// No user id has been defined</span>\n            <span class="token keyword">return</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">\'%s.%s = %s\'</span><span class="token punctuation">,</span> <span class="token variable">$targetTableAlias</span><span class="token punctuation">,</span> <span class="token variable">$fieldName</span><span class="token punctuation">,</span> <span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setAnnotationReader</span><span class="token punctuation">(</span>Reader <span class="token variable">$reader</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void\n    <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">reader</span> <span class="token operator">=</span> <span class="token variable">$reader</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Now, we must configure the Doctrine filter.</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/packages/api_platform.yaml</span>\n<span class="token key atrule">doctrine</span><span class="token punctuation">:</span>\n    <span class="token key atrule">orm</span><span class="token punctuation">:</span>\n        <span class="token key atrule">filters</span><span class="token punctuation">:</span>\n            <span class="token key atrule">user_filter</span><span class="token punctuation">:</span>\n                <span class="token key atrule">class</span><span class="token punctuation">:</span> App\\Filter\\UserFilter\n</code></pre>\n      </div>\n<p>And add a listener for every request that initializes the Doctrine filter with the current user in your bundle services declaration file.</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/services.yaml</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n    <span class="token key atrule">\'App\\EventListener\\UserFilterConfigurator\'</span><span class="token punctuation">:</span>\n        <span class="token key atrule">tags</span><span class="token punctuation">:</span>\n            <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kernel.event_listener<span class="token punctuation">,</span> <span class="token key atrule">event</span><span class="token punctuation">:</span> kernel.request<span class="token punctuation">,</span> <span class="token key atrule">priority</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token punctuation">}</span>\n        <span class="token comment"># Autoconfiguration must be disabled to set a custom priority</span>\n        <span class="token key atrule">autoconfigure</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n</code></pre>\n      </div>\n<p>It\'s key to set the priority higher than the <code>ApiPlatform\\Core\\EventListener\\ReadListener</code>\'s priority, as flagged in <a href="https://github.com/api-platform/core/issues/1185" target="_blank" rel="nofollow noopener noreferrer">this issue</a>, as otherwise the <code>PaginatorExtension</code> will ignore the Doctrine filter and return incorrect <code>totalItems</code> and <code>page</code> (first/last/next) data.</p>\n<p>Lastly, implement the configurator class:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/EventListener/UserFilterConfigurator.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>EventListener</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>User<span class="token punctuation">\\</span>UserInterface</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Security<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Authentication<span class="token punctuation">\\</span>Token<span class="token punctuation">\\</span>Storage<span class="token punctuation">\\</span>TokenStorageInterface</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Common<span class="token punctuation">\\</span>Persistence<span class="token punctuation">\\</span>ObjectManager</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Common<span class="token punctuation">\\</span>Annotations<span class="token punctuation">\\</span>Reader</span><span class="token punctuation">;</span>\n\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UserFilterConfigurator</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token variable">$em</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token variable">$tokenStorage</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token variable">$reader</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>ObjectManager <span class="token variable">$em</span><span class="token punctuation">,</span> TokenStorageInterface <span class="token variable">$tokenStorage</span><span class="token punctuation">,</span> Reader <span class="token variable">$reader</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">em</span> <span class="token operator">=</span> <span class="token variable">$em</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tokenStorage</span> <span class="token operator">=</span> <span class="token variable">$tokenStorage</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">reader</span> <span class="token operator">=</span> <span class="token variable">$reader</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onKernelRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token string">\'There is no authenticated user.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">em</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token string">\'user_filter\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$filter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$filter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAnnotationReader</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">reader</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>UserInterface\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tokenStorage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$token</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token variable">$user</span> <span class="token keyword">instanceof</span> <span class="token class-name">UserInterface</span> <span class="token operator">?</span> <span class="token variable">$user</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Done: Doctrine will automatically filter all "UserAware" entities!</p>\n<h3 id="overriding-extraction-of-properties-from-the-request"><a href="#overriding-extraction-of-properties-from-the-request" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overriding Extraction of Properties from the Request</h3>\n<p>You can change the way the filter parameters are extracted from the request. This can be done by overriding the <code>extractProperties(\\Symfony\\Component\\HttpFoundation\\Request $request)</code>\nmethod.</p>\n<p>In the following example, we will completely change the syntax of the order filter to be the following: <code>?filter[order][property]</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Filter/CustomOrderFilter.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>OrderFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>\n\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CustomOrderFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OrderFilter</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">extractProperties</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'filter[order]\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Finally, register the custom filter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yaml"><code><span class="token comment"># api/config/services.yaml</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n    <span class="token comment"># ...</span>\n    <span class="token key atrule">\'App\\Filter\\CustomOrderFilter\'</span><span class="token punctuation">:</span> <span class="token null important">~</span>\n        <span class="token comment"># Uncomment only if autoconfiguration isn\'t enabled</span>\n        <span class="token comment">#tags: [ \'api_platform.filter\' ]</span>\n</code></pre>\n      </div>\n<h2 id="apifilter-annotation"><a href="#apifilter-annotation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ApiFilter Annotation</h2>\n<p>The annotation can be used on a <code>property</code> or on a <code>class</code>.</p>\n<p>If the annotation is given over a property, the filter will be configured on the property. For example, let\'s add a search filter on <code>name</code> and on the <code>prop</code> property of the <code>colors</code> relation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>SearchFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">DummyCar</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type="integer")\n     */</span>\n    <span class="token keyword">private</span> <span class="token variable">$id</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @ORM\\Column(type="string")\n     * @ApiFilter(SearchFilter::class, strategy="partial")\n     */</span>\n    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @ORM\\OneToMany(targetEntity="DummyCarColor", mappedBy="car")\n     * @ApiFilter(SearchFilter::class, properties={"colors.prop": "ipartial"})\n     */</span>\n    <span class="token keyword">private</span> <span class="token variable">$colors</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>On the first property, <code>name</code>, it\'s straightforward. The first annotation argument is the filter class, the second specifies options, here the strategy:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>@ApiFilter(SearchFilter::class, strategy="partial")</code></pre>\n      </div>\n<p>The second annotation, we specify <code>properties</code> on which the filter should apply. It\'s necessary here because we don\'t want to filter <code>colors</code> but the property <code>prop</code> of the <code>colors</code> association.\nNote that for each given property we specify the strategy:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>@ApiFilter(SearchFilter::class, properties={"colors.prop": "ipartial"})</code></pre>\n      </div>\n<p>The <code>ApiFilter</code> annotation can be set on the class as well. If you don\'t specify any properties, it\'ll act on every property of the class.</p>\n<p>For example, let\'s define three data filters (<code>DateFilter</code>, <code>SearchFilter</code> and <code>BooleanFilter</code>) and two serialization filters (<code>PropertyFilter</code> and <code>GroupFilter</code>) on our <code>DummyCar</code> class:</p>\n<div class="gatsby-highlight">\n      <pre class="language-php"><code><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// api/src/Entity/DummyCar.php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Entity</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>ApiResource</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>BooleanFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>DateFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Bridge<span class="token punctuation">\\</span>Doctrine<span class="token punctuation">\\</span>Orm<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>SearchFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Serializer<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>GroupFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">ApiPlatform<span class="token punctuation">\\</span>Core<span class="token punctuation">\\</span>Serializer<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>PropertyFilter</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>ORM<span class="token punctuation">\\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * @ApiResource\n * @ORM\\Entity\n * @ApiFilter(BooleanFilter::class)\n * @ApiFilter(DateFilter::class, strategy=DateFilter::EXCLUDE_NULL)\n * @ApiFilter(SearchFilter::class, properties={"colors.prop": "ipartial", "name": "partial"})\n * @ApiFilter(PropertyFilter::class, arguments={"parameterName": "foobar"})\n * @ApiFilter(GroupFilter::class, arguments={"parameterName": "foobargroups"})\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">DummyCar</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The <code>BooleanFilter</code> is applied to every <code>Boolean</code> property of the class. Indeed, in each core filters we check the Doctrine type. It\'s written only by using the filter class:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>@ApiFilter(BooleanFilter::class)</code></pre>\n      </div>\n<p>The <code>DateFilter</code> given here will be applied to every <code>Date</code> property of the class <code>DummyCar</code> with the <code>DateFilter::EXCLUDE_NULL</code> strategy:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>@ApiFilter(DateFilter::class, strategy=DateFilter::EXCLUDE_NULL)</code></pre>\n      </div>\n<p>The <code>SearchFilter</code> here adds properties. The result is the exact same as the example with annotations on properties:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>@ApiFilter(SearchFilter::class, properties={"colors.prop": "ipartial", "name": "partial"})</code></pre>\n      </div>\n<p>Note that you can specify the <code>properties</code> argument on every filter.</p>\n<p>The next filters are not related to how the data is fetched but rather on the how the serialization is done on those, we can give an <code>arguments</code> option (<a href="#serializer-filters">see here for the available arguments</a>):</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>@ApiFilter(PropertyFilter::class, arguments={"parameterName": "foobar"})\n@ApiFilter(GroupFilter::class, arguments={"parameterName": "foobargroups"})</code></pre>\n      </div>'
},navDoc:{edges:[{node:{title:"The Distribution",path:"distribution",items:[{id:"index",title:"Creating a Fully Featured API in 5 Minutes",anchors:null},{id:"testing",title:"Testing and Specifying the API",anchors:null}]}},{node:{title:"The API Component",path:"core",items:[{id:"index",title:"Introduction",anchors:null},{id:"getting-started",title:"Getting Started",anchors:[{id:"installing-api-platform-core",title:"Installing API Platform Core"},{id:"before-reading-this-documentation",title:"Before Reading this Documentation"},{id:"mapping-the-entities",title:"Mapping the Entities"}]},{id:"configuration",title:"Configuration",anchors:null},{id:"operations",title:"Operations",anchors:[{id:"enabling-and-disabling-operations",title:"Enabling and Disabling Operations"},{id:"configuring-operations",title:"Configuring Operations"},{id:"subresources",title:"Subresources"},{id:"creating-custom-operations-and-controllers",title:"Creating Custom Operations and Controllers"}]},{id:"default-order",title:"Overriding Default Order",anchors:null},{id:"filters",title:"Filters",anchors:[{id:"doctrine-orm-filters",title:"Doctrine ORM Filters"},{id:"serializer-filters",title:"Serializer Filters"},{id:"creating-custom-filters",title:"Creating Custom Filters"},{id:"apifilter-annotation",title:"ApiFilter Annotation"}]},{id:"serialization",title:"The Serialization Process",anchors:[{id:"overall-process",title:"Overall Process"},{id:"available-serializers",title:"Available Serializers"},{id:"the-serialization-context-groups-and-relations",title:"The Serialization Context, Groups and Relations"},{id:"using-serialization-groups",title:"Using Serialization Groups"},{id:"using-different-serialization-groups-per-operation",title:"Using Different Serialization Groups per Operation"},{id:"changing-the-serialization-context-dynamically",title:"Changing the Serialization Context Dynamically"},{id:"changing-the-serialization-context-on-a-per-item-basis",title:"Changing the Serialization Context on a Per Item Basis"},{id:"name-conversion",title:"Name Conversion"},{id:"decorating-a-serializer-and-add-extra-data",title:"Decorating a Serializer and Add Extra Data"},{id:"entity-identifier-case",title:"Entity Identifier Case"},{id:"embedding-the-json-ld-context",title:"Embedding the JSON-LD Context"}]},{id:"validation",title:"Validation",anchors:[{id:"using-validation-groups",title:"Using Validation Groups"},{id:"dynamic-validation-groups",title:"Dynamic Validation Groups"},{id:"error-levels-and-payload-serialization",title:"Error Levels and Payload Serialization"}]},{id:"errors",title:"Error Handling",anchors:[{id:"converting-php-exceptions-to-http-errors",title:"Converting PHP Exceptions to HTTP Errors"}]},{id:"pagination",title:"Pagination",anchors:[{id:"disabling-the-pagination",title:"Disabling the Pagination"},{id:"changing-the-number-of-items-per-page",title:"Changing the Number of Items per Page"},{id:"partial-pagination",title:"Partial Pagination"}]},{id:"events",title:"The Event System",anchors:null},{id:"content-negotiation",title:"Content Negotiation",anchors:[{id:"enabling-several-formats",title:"Enabling Several Formats"},{id:"registering-a-custom-serializer",title:"Registering a Custom Serializer"},{id:"creating-a-responder",title:"Creating a Responder"},{id:"writing-a-custom-normalizer",title:"Writing a Custom Normalizer"}]},{id:"external-vocabularies",title:"Using External JSON-LD Vocabularies",anchors:null},{id:"extending-jsonld-context",title:"Extending JSON-LD context",anchors:null},{id:"data-providers",title:"Data Providers",anchors:[{id:"custom-collection-data-provider",title:"Custom Collection Data Provider"},{id:"custom-item-data-provider",title:"Custom Item Data Provider"},{id:"injecting-the-serializer-in-an-itemdataprovider",title:'Injecting the Serializer in an "ItemDataProvider"'}]},{id:"extensions",title:"Extensions",anchors:[{id:"custom-extension",title:"Custom Extension"},{id:"example",title:"Filter upon the current user"}]},{id:"security",title:"Security",anchors:null},{id:"performance",title:"Performance",anchors:[{id:"enabling-the-builtin-http-cache-invalidation-system",title:"Enabling the Built-in HTTP Cache Invalidation System"},{id:"enabling-the-metadata-cache",title:"Enabling the Metadata Cache"},{id:"using-ppm-php-pm",title:"Using PPM (PHP-PM)"},{id:"doctrine-queries-and-indexes",title:"Doctrine Queries and Indexes"}]},{id:"operation-path-naming",title:"Operation Path Naming",anchors:[{id:"configuration",title:"Configuration"},{id:"create-a-custom-operation-path-resolver",title:"Create a Custom Operation Path Naming"}]},{id:"form-data",title:"Accept application/x-www-form-urlencoded Form Data",anchors:null},{id:"fosuser-bundle",title:"FOSUserBundle Integration",anchors:[{id:"installing-the-bundle",title:"Installing the Bundle"},{id:"enabling-the-bridge",title:"Enabling the Bridge"},{id:"creating-a-user-entity-with-serialization-groups",title:'Creating a "User" Entity with Serialization Groups'}]},{id:"jwt",title:"Adding a JWT authentication using LexikJWTAuthenticationBundle",anchors:[{id:"testing-with-swagger",title:"Testing with Swagger"},{id:"testing-with-behat",title:"Testing with Behat"}]},{id:"nelmio-api-doc",title:"NelmioApiDocBundle integration",anchors:null},{id:"angularjs-integration",title:"AngularJS Integration",anchors:[{id:"restangular",title:"Restangular"},{id:"ng-admin",title:"ng-admin"}]},{id:"swagger",title:"Swagger Support",anchors:[{id:"override-swagger-documentation",title:"Override Swagger documentation"}]},{id:"graphql",title:"GraphQL Support",anchors:[{id:"overall-view",title:"Overall View"},{id:"enabling-graphql",title:"Enabling GraphQL"},{id:"graphiql",title:"GraphiQL"}]},{id:"dto",title:"Handling Data Transfer Objects (DTOs)",anchors:null},{id:"file-upload",title:"Handling File Upload with VichUploaderBundle",anchors:null}]}},{node:{title:"The Schema Generator Component",path:"schema-generator",items:[{id:"index",title:"Introduction",anchors:null},{id:"getting-started",title:"Getting Started",anchors:null},{id:"configuration",title:"Configuration",anchors:null}]}},{node:{title:"The Admin Component",path:"admin",items:[{id:"index",title:"Introduction",anchors:[{id:"features",title:"Features"}]},{id:"getting-started",title:"Getting Started",anchors:[{id:"installation",title:"Installation"},{id:"creating-the-admin",title:"Creating the Admin"},{id:"customizing-the-admin",title:"Customizing the Admin"}]},{id:"authentication-support",title:"Authentication Support",anchors:null},{id:"handling-relations-to-collections",title:"Handling Relations to Collections",anchors:[{id:"using-an-autocomplete-input-for-relations",title:"Using an Autocomplete Input for Relations"}]}]}},{node:{title:"The Client Generator Component",path:"client-generator",items:[{id:"index",title:"Introduction",anchors:[{id:"features",title:"Features"}]},{id:"react",title:"React generator",anchors:null},{id:"vuejs",title:"Vue.js generator",anchors:null},{id:"troubleshooting",title:"Troubleshooting",anchors:null}]}},{node:{title:"Deployment",path:"deployment",items:[{id:"index",title:"Introduction",anchors:null},{id:"kubernetes",title:"Deploying to a Kubernetes Cluster",anchors:null},{id:"heroku",title:"Deploying an API Platform App on Heroku",anchors:null}]}},{node:{title:"Extra",path:"extra",items:[{id:"releases",title:"The Release Process",anchors:null},{id:"philosophy",title:"The Project's Philosophy",anchors:null},{id:"troubleshooting",title:"Troubleshooting",anchors:null},{id:"contribution-guides",title:"Contribution Guides",anchors:null},{id:"conduct",title:"Contributor Code Of Conduct",anchors:null}]}}]}},pathContext:{path:"docs/core/filters",current:{path:"docs/core/filters",title:"The API Component - Filters"},prev:{path:"docs/core/default-order",title:"Overriding Default Order",rootPath:"The API Component"},next:{path:"docs/core/serialization",title:"The Serialization Process",rootPath:"The API Component"}}}}});
//# sourceMappingURL=path---docs-core-filters-a7d44f09b742ecf826df.js.map